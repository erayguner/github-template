[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project]
name = "example-python-project"
version = "0.1.0"
description = "Example Python project with best practices"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
license = {text = "MIT"}
readme = "README.md"
keywords = ["python", "template", "example"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "requests>=2.31.0,<3.0.0",
    "pydantic>=2.0.0,<3.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
]

# UV dependency groups (modern package management)
[dependency-groups]
dev = [
    "pytest>=8.4.0",
    "pytest-cov>=6.2.0", 
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=0.25.0",
    "pytest-xvfb>=3.0.0",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
    "ruff>=0.8.7",
    "mypy>=1.17.1",
    "types-requests>=2.31.0",
    "types-PyYAML>=6.0.12",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.3.0",
    "coverage[toml]>=7.3.0",
    "ipython>=8.14.0",
    "ipdb>=0.13.13",
    "rich>=13.5.0",
]

docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
]

test = [
    "pytest>=8.4.0",
    "pytest-cov>=6.2.0",
    "pytest-mock>=3.14.0",
    "coverage[toml]>=7.3.0",
]

profiling = [
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
]

api = [
    "httpx>=0.24.0",
    "pytest-httpx>=0.21.0",
]

# Legacy optional-dependencies for compatibility
[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "pytest-cov>=6.2.0",
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=0.25.0",
    "pytest-xvfb>=3.0.0",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
    "ruff>=0.8.7",
    "mypy>=1.17.1",
    "types-requests>=2.31.0",
    "types-PyYAML>=6.0.12",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.3.0",
    "coverage[toml]>=7.3.0",
    "ipython>=8.14.0",
    "ipdb>=0.13.13",
    "rich>=13.5.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
]
test = [
    "pytest>=8.4.0",
    "pytest-cov>=6.2.0",
    "pytest-mock>=3.14.0",
    "coverage[toml]>=7.3.0",
]

[project.urls]
"Homepage" = "https://github.com/yourusername/example-python-project"
"Bug Reports" = "https://github.com/yourusername/example-python-project/issues"
"Source" = "https://github.com/yourusername/example-python-project"
"Documentation" = "https://example-python-project.readthedocs.io/"

[project.scripts]
example-app = "src.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml"]

# Ruff configuration (2025 standard - replaces Black, isort, Flake8)
[tool.ruff]
line-length = 88
target-version = "py39"
include = ["*.py", "*.pyi", "**/pyproject.toml"]
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache", 
    ".tox",
    ".venv",
    "_build",
    "buck-out",
    "build",
    "dist",
    "migrations",
]

# Linting configuration
[tool.ruff.lint]
select = [
    "F",     # Pyflakes
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "C90",   # mccabe
    "I",     # isort
    "N",     # pep8-naming
    "D",     # pydocstyle
    "UP",    # pyupgrade
    "ANN",   # flake8-annotations
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "C4",    # flake8-comprehensions
    "T10",   # flake8-debugger
    "EM",    # flake8-errmsg
    "ISC",   # flake8-implicit-str-concat
    "G",     # flake8-logging-format
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "PGH",   # pygrep-hooks
    "PL",    # Pylint
    "TRY",   # tryceratops
    "RUF",   # Ruff-specific rules
]

ignore = [
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",  # Missing docstrings
    "D204", "D212", "D213",  # Docstring formatting
    "PLR0913", "PLR0912", "PLR0915",  # Too many args/branches/statements
    "PLR2004",  # Magic value comparison
    "S101",     # Use of assert (allow in tests)
    "EM101", "EM102",  # Exception message format
    "TRY003", "TRY300", "TRY400",  # Exception handling
    "G004",    # Logging f-string
    "F841",    # Unused variable
]

fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["S101", "T201", "PLR2004", "ARG001"]
"**/conftest.py" = ["F401"]
"**/settings.py" = ["S105"]

[tool.ruff.lint.isort]
known-first-party = ["src"]
force-single-line = false

# Formatter configuration (replaces Black)
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "requests.*",
    "pydantic.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit configuration
[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]