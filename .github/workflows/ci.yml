name: Basic CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write

jobs:
  # Combined linting and security checks
  lint-and-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      # -------- Setup Tools --------
      - name: Install uv
        if: hashFiles('python/**/*.py', 'python/pyproject.toml', 'python/requirements*.txt') != ''
        uses: astral-sh/setup-uv@v6
        with:
          version: latest

      - name: Set up Python
        if: hashFiles('python/**/*.py', 'python/pyproject.toml', 'python/requirements*.txt') != ''
        run: uv python install 3.11

      - name: Setup Terraform
        if: hashFiles('**/*.tf') != ''
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.6.0

      - name: Install linting tools
        run: |
          # Install shellcheck for bash linting
          sudo apt-get update && sudo apt-get install -y shellcheck
          # Install yamllint for YAML linting
          pip install yamllint

      # -------- Python Linting & Security --------
      - name: Python linting and security
        if: hashFiles('python/**/*.py', 'python/pyproject.toml', 'python/requirements*.txt') != ''
        working-directory: ./python
        run: |
          # Setup environment
          uv venv --python 3.11
          if [[ -f "pyproject.toml" ]]; then
            uv sync --group dev || true
          elif [[ -f "requirements.txt" ]]; then
            uv pip install -r requirements.txt || true
          fi

          # Linting
          uv run ruff check .
          uv run ruff format --check .

          # Security scanning
          uv pip install bandit || true
          uv run bandit -r src/ || true

      # -------- Terraform Linting & Security --------
      - name: Terraform linting and security
        if: hashFiles('**/*.tf') != ''
        working-directory: ./terraform
        run: |
          # Linting
          terraform fmt -check -recursive .
          terraform init -backend=false
          terraform validate

          # Security scanning
          tfsec . --format sarif --out tfsec.sarif

      # -------- Bash Script Linting --------
      - name: Bash script linting
        if: hashFiles('**/*.sh', '**/*.bash') != ''
        run: |
          # Find and lint bash scripts (exclude node_modules, .venv, .git)
          find . -name "*.sh" -o -name "*.bash" | grep -v -E "(node_modules|\.venv|\.git|vendor)" | while read -r script; do
            echo "Linting: $script"
            shellcheck "$script" || true
          done

      # -------- YAML Linting --------
      - name: YAML linting
        if: hashFiles('**/*.yml', '**/*.yaml') != ''
        run: |
          # Lint YAML files with basic config (exclude hidden dirs and venv)
          yamllint -d "{extends: relaxed, rules: {line-length: {max: 120}}}" \
            --ignore ".venv/*" --ignore "python/.venv/*" --ignore ".git/*" . || true

      # -------- CodeQL Analysis --------
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: +security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # -------- Secret Scanning --------
      - name: Secret scanning
        uses: trufflesecurity/trufflehog@v3.85.0
        with:
          path: ./
          base: main
          head: HEAD

      # -------- Upload Security Results --------
      - name: Upload Terraform SARIF
        if: hashFiles('**/*.tf') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: terraform/tfsec.sarif
          category: "terraform-security"
