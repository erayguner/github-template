name: Claude Auto-Fix

on:
  # Trigger when CI workflow fails or has issues
  workflow_run:
    workflows: ["Basic CI"]
    types: [completed]
    branches: [main, master, develop]
  # Trigger on pull requests with check failures
  pull_request:
    branches: [main, master, develop]
  # Trigger on check suite failure
  check_suite:
    types: [completed]
  # Trigger on status updates (for external CI tools)
  status: {}
  # Manual trigger
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if no issues detected'
        required: false
        default: false
        type: boolean
      target_branch:
        description: 'Target branch for fixes (defaults to current branch)'
        required: false
        type: string
      pr_number:
        description: 'PR number to fix (optional)'
        required: false
        type: string

# Required permissions for the workflow
permissions:
  contents: write
  pull-requests: write
  issues: read
  checks: read
  actions: read
  security-events: read

jobs:
  check-trigger-conditions:
    name: Check Trigger Conditions
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      trigger_reason: ${{ steps.check.outputs.trigger_reason }}
      pr_number: ${{ steps.check.outputs.pr_number }}
      head_sha: ${{ steps.check.outputs.head_sha }}
    
    steps:
      - name: Check if auto-fix should run
        id: check
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          
          SHOULD_RUN=false
          TRIGGER_REASON=""
          PR_NUMBER=""
          HEAD_SHA="${{ github.sha }}"
          
          # Check for auto-fix commit to prevent loops
          if [[ "${{ github.event.head_commit.message || '' }}" == *"[auto-fix]"* ]]; then
            echo "⚠️ Skipping auto-fix commit to prevent loops"
            SHOULD_RUN=false
            TRIGGER_REASON="auto-fix loop prevention"
          
          # Manual trigger
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "✅ Manual trigger detected"
            SHOULD_RUN=true
            TRIGGER_REASON="manual trigger"
            if [[ -n "${{ github.event.inputs.pr_number }}" ]]; then
              PR_NUMBER="${{ github.event.inputs.pr_number }}"
            fi
          
          # Workflow run trigger (CI failure)
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
            if [[ "${{ github.event.workflow_run.conclusion }}" == "failure" ]] || [[ "${{ github.event.workflow_run.conclusion }}" == "cancelled" ]]; then
              echo "✅ CI workflow failed - triggering auto-fix"
              SHOULD_RUN=true
              TRIGGER_REASON="ci failure"
              HEAD_SHA="${{ github.event.workflow_run.head_sha }}"
              # Extract PR number from workflow run if available
              if [[ -n "${{ github.event.workflow_run.pull_requests[0].number }}" ]]; then
                PR_NUMBER="${{ github.event.workflow_run.pull_requests[0].number }}"
              fi
            else
              echo "⚠️ CI workflow succeeded - no need to fix"
              SHOULD_RUN=false
              TRIGGER_REASON="ci success"
            fi
          
          # Pull request trigger
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "✅ Pull request trigger detected"
            SHOULD_RUN=true
            TRIGGER_REASON="pull request"
            PR_NUMBER="${{ github.event.number }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          # Check suite failure
          elif [[ "${{ github.event_name }}" == "check_suite" ]]; then
            if [[ "${{ github.event.check_suite.conclusion }}" == "failure" ]]; then
              echo "✅ Check suite failed - triggering auto-fix"
              SHOULD_RUN=true
              TRIGGER_REASON="check suite failure"
              HEAD_SHA="${{ github.event.check_suite.head_sha }}"
            else
              echo "⚠️ Check suite passed - no need to fix"
              SHOULD_RUN=false
              TRIGGER_REASON="check suite success"
            fi
          
          # Status failure (external CI)
          elif [[ "${{ github.event_name }}" == "status" ]]; then
            if [[ "${{ github.event.state }}" == "failure" ]] || [[ "${{ github.event.state }}" == "error" ]]; then
              echo "✅ External status failed - triggering auto-fix"
              SHOULD_RUN=true
              TRIGGER_REASON="external status failure"
            else
              echo "⚠️ External status passed - no need to fix"
              SHOULD_RUN=false
              TRIGGER_REASON="external status success"
            fi
          
          # Force run override
          elif [[ "${{ github.event.inputs.force_run }}" == "true" ]]; then
            echo "✅ Force run enabled"
            SHOULD_RUN=true
            TRIGGER_REASON="force run"
          
          else
            echo "⚠️ No trigger conditions met"
            SHOULD_RUN=false
            TRIGGER_REASON="no conditions met"
          fi
          
          echo "should_run=$SHOULD_RUN" >> $GITHUB_OUTPUT
          echo "trigger_reason=$TRIGGER_REASON" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "head_sha=$HEAD_SHA" >> $GITHUB_OUTPUT
          
          echo "Final decision: SHOULD_RUN=$SHOULD_RUN, REASON=$TRIGGER_REASON"

  detect-issues:
    name: Detect Issues & Auto-Fix
    runs-on: ubuntu-latest
    needs: check-trigger-conditions
    
    # Only run if trigger conditions are met
    if: needs.check-trigger-conditions.outputs.should_run == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.check-trigger-conditions.outputs.head_sha }}
      
      - name: Set workflow context
        id: context
        run: |
          echo "Trigger reason: ${{ needs.check-trigger-conditions.outputs.trigger_reason }}"
          echo "PR number: ${{ needs.check-trigger-conditions.outputs.pr_number }}"
          echo "Head SHA: ${{ needs.check-trigger-conditions.outputs.head_sha }}"
          
          # Set up context for different trigger types
          if [[ "${{ needs.check-trigger-conditions.outputs.trigger_reason }}" == "ci failure" ]]; then
            echo "🔍 Analyzing CI failure for auto-fix"
            echo "target_type=ci_failure" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.check-trigger-conditions.outputs.trigger_reason }}" == "pull request" ]]; then
            echo "🔍 Analyzing PR for potential fixes"
            echo "target_type=pull_request" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.check-trigger-conditions.outputs.trigger_reason }}" == "manual trigger" ]]; then
            echo "🔍 Manual trigger - analyzing current state"
            echo "target_type=manual" >> $GITHUB_OUTPUT
          else
            echo "🔍 Analyzing for general issues"
            echo "target_type=general" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
        if: hashFiles('package.json') != ''

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
        if: hashFiles('requirements.txt', 'pyproject.toml', '*.py') != ''

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
        if: hashFiles('go.mod', '*.go') != ''

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
        if: hashFiles('Cargo.toml', '*.rs') != ''

      - name: Install dependencies
        run: |
          # Install Node.js dependencies
          if [ -f "package.json" ]; then
            npm ci || npm install
          fi
          
          # Install Python dependencies
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          elif [ -f "pyproject.toml" ]; then
            pip install -e .
          fi
          
          # Install Go dependencies
          if [ -f "go.mod" ]; then
            go mod download
          fi
          
          # Install Rust dependencies
          if [ -f "Cargo.toml" ]; then
            cargo fetch
          fi

      - name: Run linters and collect issues
        id: lint
        continue-on-error: true
        run: |
          echo "## 🔍 Detecting Issues" >> $GITHUB_STEP_SUMMARY
          
          ISSUES_FOUND=false
          
          # JavaScript/TypeScript linting
          if [ -f "package.json" ]; then
            echo "### JavaScript/TypeScript Issues" >> $GITHUB_STEP_SUMMARY
            
            # ESLint
            if npm list eslint &>/dev/null; then
              echo "Running ESLint..." >> $GITHUB_STEP_SUMMARY
              if npx eslint . --format json --output-file eslint-report.json 2>/dev/null || true; then
                if [ -f "eslint-report.json" ] && [ "$(cat eslint-report.json)" != "[]" ]; then
                  ISSUES_FOUND=true
                  echo "- ❌ ESLint issues detected" >> $GITHUB_STEP_SUMMARY
                else
                  echo "- ✅ No ESLint issues" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            fi
            
            # TypeScript compiler
            if npm list typescript &>/dev/null; then
              echo "Running TypeScript check..." >> $GITHUB_STEP_SUMMARY
              if ! npx tsc --noEmit 2>tsc-errors.txt; then
                ISSUES_FOUND=true
                echo "- ❌ TypeScript compilation errors detected" >> $GITHUB_STEP_SUMMARY
              else
                echo "- ✅ No TypeScript errors" >> $GITHUB_STEP_SUMMARY
              fi
            fi
            
            # Prettier
            if npm list prettier &>/dev/null; then
              echo "Checking Prettier formatting..." >> $GITHUB_STEP_SUMMARY
              if ! npx prettier --check . 2>/dev/null; then
                ISSUES_FOUND=true
                echo "- ❌ Code formatting issues detected" >> $GITHUB_STEP_SUMMARY
              else
                echo "- ✅ Code is properly formatted" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi
          
          # Python linting
          if compgen -G "*.py" > /dev/null; then
            echo "### Python Issues" >> $GITHUB_STEP_SUMMARY
            
            # Install Python linting tools
            pip install -q flake8 black isort mypy pylint bandit safety || true
            
            # Flake8
            if command -v flake8 &>/dev/null; then
              echo "Running Flake8..." >> $GITHUB_STEP_SUMMARY
              if ! flake8 . --output-file=flake8-report.txt 2>/dev/null; then
                ISSUES_FOUND=true
                echo "- ❌ Flake8 issues detected" >> $GITHUB_STEP_SUMMARY
              else
                echo "- ✅ No Flake8 issues" >> $GITHUB_STEP_SUMMARY
              fi
            fi
            
            # Black formatting
            if command -v black &>/dev/null; then
              echo "Checking Black formatting..." >> $GITHUB_STEP_SUMMARY
              if ! black --check . 2>/dev/null; then
                ISSUES_FOUND=true
                echo "- ❌ Black formatting issues detected" >> $GITHUB_STEP_SUMMARY
              else
                echo "- ✅ Code is properly formatted (Black)" >> $GITHUB_STEP_SUMMARY
              fi
            fi
            
            # Security check with Bandit
            if command -v bandit &>/dev/null; then
              echo "Running Bandit security check..." >> $GITHUB_STEP_SUMMARY
              if ! bandit -r . -f json -o bandit-report.json 2>/dev/null; then
                ISSUES_FOUND=true
                echo "- ❌ Security issues detected" >> $GITHUB_STEP_SUMMARY
              else
                echo "- ✅ No security issues found" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi
          
          # Go linting
          if [ -f "go.mod" ]; then
            echo "### Go Issues" >> $GITHUB_STEP_SUMMARY
            
            # Go fmt
            if [ -n "$(gofmt -l .)" ]; then
              ISSUES_FOUND=true
              echo "- ❌ Go formatting issues detected" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ✅ Go code is properly formatted" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Go vet
            if ! go vet ./... 2>go-vet-errors.txt; then
              ISSUES_FOUND=true
              echo "- ❌ Go vet issues detected" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ✅ No Go vet issues" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Staticcheck
            go install honnef.co/go/tools/cmd/staticcheck@latest
            if ! staticcheck ./... 2>staticcheck-errors.txt; then
              ISSUES_FOUND=true
              echo "- ❌ Staticcheck issues detected" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ✅ No staticcheck issues" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Rust linting
          if [ -f "Cargo.toml" ]; then
            echo "### Rust Issues" >> $GITHUB_STEP_SUMMARY
            
            # Cargo fmt
            if ! cargo fmt -- --check 2>/dev/null; then
              ISSUES_FOUND=true
              echo "- ❌ Rust formatting issues detected" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ✅ Rust code is properly formatted" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Cargo clippy
            if ! cargo clippy -- -D warnings 2>clippy-errors.txt; then
              ISSUES_FOUND=true
              echo "- ❌ Clippy issues detected" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ✅ No Clippy issues" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "issues_found=$ISSUES_FOUND" >> $GITHUB_OUTPUT

      - name: Run tests
        id: tests
        continue-on-error: true
        run: |
          echo "## 🧪 Running Tests" >> $GITHUB_STEP_SUMMARY
          
          TEST_FAILURES=false
          
          # Node.js tests
          if [ -f "package.json" ]; then
            if npm run test --if-present 2>test-errors.txt; then
              echo "- ✅ Node.js tests passed" >> $GITHUB_STEP_SUMMARY
            else
              TEST_FAILURES=true
              echo "- ❌ Node.js tests failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Python tests
          if compgen -G "test_*.py" > /dev/null || compgen -G "*_test.py" > /dev/null; then
            pip install -q pytest || true
            if command -v pytest &>/dev/null; then
              if pytest 2>pytest-errors.txt; then
                echo "- ✅ Python tests passed" >> $GITHUB_STEP_SUMMARY
              else
                TEST_FAILURES=true
                echo "- ❌ Python tests failed" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi
          
          # Go tests
          if [ -f "go.mod" ]; then
            if go test ./... 2>go-test-errors.txt; then
              echo "- ✅ Go tests passed" >> $GITHUB_STEP_SUMMARY
            else
              TEST_FAILURES=true
              echo "- ❌ Go tests failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Rust tests
          if [ -f "Cargo.toml" ]; then
            if cargo test 2>rust-test-errors.txt; then
              echo "- ✅ Rust tests passed" >> $GITHUB_STEP_SUMMARY
            else
              TEST_FAILURES=true
              echo "- ❌ Rust tests failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "test_failures=$TEST_FAILURES" >> $GITHUB_OUTPUT

      - name: Create issue reports
        if: steps.lint.outputs.issues_found == 'true' || steps.tests.outputs.test_failures == 'true'
        run: |
          mkdir -p .claude/reports
          
          # Collect all issues into a comprehensive report
          cat > .claude/reports/issues.md << 'EOF'
          # 🚨 Auto-Detected Issues Report
          
          Generated on: $(date)
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          
          ## Summary
          - Issues Found: ${{ steps.lint.outputs.issues_found }}
          - Test Failures: ${{ steps.tests.outputs.test_failures }}
          
          ## Detailed Issues
          EOF
          
          # Add linting issues
          if [ -f "eslint-report.json" ]; then
            echo -e "\n### ESLint Issues\n\`\`\`json" >> .claude/reports/issues.md
            cat eslint-report.json >> .claude/reports/issues.md
            echo -e "\`\`\`" >> .claude/reports/issues.md
          fi
          
          if [ -f "flake8-report.txt" ]; then
            echo -e "\n### Flake8 Issues\n\`\`\`" >> .claude/reports/issues.md
            cat flake8-report.txt >> .claude/reports/issues.md
            echo -e "\`\`\`" >> .claude/reports/issues.md
          fi
          
          # Add test failures
          if [ -f "test-errors.txt" ]; then
            echo -e "\n### Test Failures\n\`\`\`" >> .claude/reports/issues.md
            cat test-errors.txt >> .claude/reports/issues.md
            echo -e "\`\`\`" >> .claude/reports/issues.md
          fi

      - name: Auto-fix with Claude
        if: (steps.lint.outputs.issues_found == 'true' || steps.tests.outputs.test_failures == 'true' || github.event.inputs.force_run == 'true') && secrets.ANTHROPIC_API_KEY != ''
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "## 🤖 Auto-Fixing with Claude" >> $GITHUB_STEP_SUMMARY
          
          # Use Python with Anthropic SDK for more reliable Claude integration
          cat > claude_fixer.py << 'EOF'
          import os
          import sys
          import subprocess
          import json
          from anthropic import Anthropic

          def main():
              api_key = os.environ.get('ANTHROPIC_API_KEY')
              if not api_key:
                  print("❌ ANTHROPIC_API_KEY not found")
                  return False

              try:
                  client = Anthropic(api_key=api_key)
                  
                  # Collect repository information
                  repo_files = []
                  for ext in ['*.py', '*.js', '*.ts', '*.go', '*.rs']:
                      result = subprocess.run(['find', '.', '-name', ext], capture_output=True, text=True)
                      repo_files.extend(result.stdout.strip().split('\n') if result.stdout.strip() else [])
                  
                  # Read issue reports
                  issues_content = ""
                  if os.path.exists('.claude/reports/issues.md'):
                      with open('.claude/reports/issues.md', 'r') as f:
                          issues_content = f.read()
                  
                  # Create comprehensive fix prompt
                  prompt = f"""You are an expert code reviewer and auto-fixer. Please analyze this repository and fix all detected issues:

          ## Task
          Fix all issues in this repository while maintaining functionality:
          1. **Linting Issues**: Resolve all linter warnings/errors
          2. **Formatting**: Apply consistent code formatting
          3. **Test Failures**: Fix failing tests
          4. **Security**: Address vulnerabilities
          5. **Type Errors**: Resolve compilation issues

          ## Repository Files ({len([f for f in repo_files if f])})
          {chr(10).join(f for f in repo_files[:20] if f)}

          ## Detected Issues
          {issues_content or 'See CI output for specific issues detected by linters and tests.'}

          ## Instructions
          - Make targeted fixes that resolve specific issues
          - Maintain original functionality
          - Follow existing code style and patterns
          - Ensure all tests pass after fixes
          - Output a summary of changes made

          Please provide specific fixes for each detected issue."""

                  # Request fixes from Claude
                  response = client.messages.create(
                      model="claude-3-5-sonnet-20241022",
                      max_tokens=4000,
                      messages=[{"role": "user", "content": prompt}]
                  )
                  
                  with open('claude-fixes.txt', 'w') as f:
                      f.write(response.content[0].text)
                  
                  print("✅ Claude analysis completed")
                  print("Fixes saved to: claude-fixes.txt")
                  return True
                  
              except Exception as e:
                  print(f"❌ Claude integration error: {e}")
                  return False

          if __name__ == "__main__":
              success = main()
              sys.exit(0 if success else 1)
          EOF
          
          # Install anthropic SDK and run Claude fixer
          pip install anthropic
          echo "Invoking Claude for intelligent auto-fixes..." >> $GITHUB_STEP_SUMMARY
          if python claude_fixer.py; then
            echo "- ✅ Claude analysis completed" >> $GITHUB_STEP_SUMMARY
            if [ -f "claude-fixes.txt" ]; then
              echo "- 📋 Fix recommendations generated" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- ❌ Claude integration failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Apply formatting fixes
        if: steps.lint.outputs.issues_found == 'true'
        run: |
          echo "## 🎨 Applying Formatting Fixes" >> $GITHUB_STEP_SUMMARY
          
          # JavaScript/TypeScript formatting
          if [ -f "package.json" ] && npm list prettier &>/dev/null; then
            npx prettier --write . || true
            echo "- ✅ Applied Prettier formatting" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Python formatting
          if compgen -G "*.py" > /dev/null; then
            if command -v black &>/dev/null; then
              black . || true
              echo "- ✅ Applied Black formatting" >> $GITHUB_STEP_SUMMARY
            fi
            
            if command -v isort &>/dev/null; then
              isort . || true
              echo "- ✅ Applied import sorting" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Go formatting
          if [ -f "go.mod" ]; then
            gofmt -w . || true
            echo "- ✅ Applied Go formatting" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Rust formatting
          if [ -f "Cargo.toml" ]; then
            cargo fmt || true
            echo "- ✅ Applied Rust formatting" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Commit and push fixes
        if: steps.lint.outputs.issues_found == 'true' || steps.tests.outputs.test_failures == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "Claude Auto-Fix Bot"
          
          # Check for changes
          if [ -n "$(git status --porcelain)" ]; then
            echo "## 💾 Committing Fixes" >> $GITHUB_STEP_SUMMARY
            
            # Add changed files
            git add -A
            
            # Create detailed commit message based on trigger type
            TRIGGER_REASON="${{ needs.check-trigger-conditions.outputs.trigger_reason }}"
            case "$TRIGGER_REASON" in
              "ci failure")
                COMMIT_MSG="[auto-fix] Resolve CI failure issues

            🤖 Auto-generated fixes for failed CI workflow
            - Triggered by: CI workflow failure
            - Branch: ${{ github.ref_name }}
            - Workflow Run: ${{ github.run_number }}"
                ;;
              "pull request")
                COMMIT_MSG="[auto-fix] Resolve PR check issues

            🤖 Auto-generated fixes for PR #${{ needs.check-trigger-conditions.outputs.pr_number }}
            - Triggered by: Pull request checks
            - Branch: ${{ github.ref_name }}
            - Workflow Run: ${{ github.run_number }}"
                ;;
              "manual trigger")
                COMMIT_MSG="[auto-fix] Manual trigger fixes

            🤖 Auto-generated fixes (manual trigger)
            - Branch: ${{ github.ref_name }}
            - Workflow Run: ${{ github.run_number }}"
                ;;
              *)
                COMMIT_MSG="[auto-fix] Resolve detected issues

            🤖 Auto-generated fixes
            - Trigger: $TRIGGER_REASON
            - Branch: ${{ github.ref_name }}
            - Workflow Run: ${{ github.run_number }}"
                ;;
            esac
            
            COMMIT_MSG="$COMMIT_MSG

            Fixes applied:
            - Linting issues resolved
            - Code formatting applied  
            - Test failures addressed
            - Security issues patched

            🤖 Generated with Claude Code
            Co-Authored-By: Claude <noreply@anthropic.com>"
            
            git commit -m "$COMMIT_MSG" || exit 0
            
            # Determine target branch based on trigger type
            if [[ "${{ needs.check-trigger-conditions.outputs.trigger_reason }}" == "ci failure" ]] && [[ -n "${{ github.event.workflow_run.head_branch }}" ]]; then
              TARGET_BRANCH="${{ github.event.workflow_run.head_branch }}"
            else
              TARGET_BRANCH="${{ github.event.inputs.target_branch || github.ref_name }}"
            fi
            
            # Push changes
            git push origin HEAD:$TARGET_BRANCH
            
            echo "- ✅ Changes committed and pushed to $TARGET_BRANCH" >> $GITHUB_STEP_SUMMARY
            echo "- 📍 Trigger: $TRIGGER_REASON" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ℹ️ No changes to commit" >> $GITHUB_STEP_SUMMARY
            echo "- 📍 Trigger: $TRIGGER_REASON (no fixes needed)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create Pull Request (for main/master branches)
        if: (github.ref_name == 'main' || github.ref_name == 'master') && steps.lint.outputs.issues_found == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a fix branch
          FIX_BRANCH="auto-fix/$(date +%Y%m%d-%H%M%S)"
          git checkout -b $FIX_BRANCH
          
          # Push fix branch
          git push origin $FIX_BRANCH
          
          # Create PR using GitHub CLI
          gh pr create \
            --title "🤖 [Auto-Fix] Resolve detected issues" \
            --body "This PR contains automated fixes generated by Claude Code.
            
            ## Changes
            - Resolved linting issues
            - Applied code formatting
            - Fixed test failures
            
            ## Review Notes
            These changes were automatically generated. Please review before merging.
            
            Generated by: ${{ github.workflow }} #${{ github.run_number }}" \
            --head $FIX_BRANCH \
            --base ${{ github.ref_name }}

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: auto-fix-reports
          path: |
            .claude/reports/
            *-report.*
            *-errors.txt
          retention-days: 7

      - name: Summary
        if: always()
        run: |
          echo "## 📊 Auto-Fix Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Issues Found**: ${{ steps.lint.outputs.issues_found || 'unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Failures**: ${{ steps.tests.outputs.test_failures || 'unknown' }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ secrets.ANTHROPIC_API_KEY }}" != "" ]; then
            echo "- **Claude Integration**: ✅ Enabled" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Claude Integration**: ❌ Missing ANTHROPIC_API_KEY" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Runtime**: $(date)" >> $GITHUB_STEP_SUMMARY