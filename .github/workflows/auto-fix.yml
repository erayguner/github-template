name: Auto Fix CI Failures

on:
  workflow_run:
    workflows: ["Basic CI"]   # must match your CI workflow name exactly
    types: [completed]

permissions:
  contents: write          # to push a fix branch
  pull-requests: write     # to comment / open PRs
  actions: read            # to read job/run metadata
  issues: write
  id-token: write          # if your action needs OIDC, safe to keep

jobs:
  auto-fix:
    # Trigger only on failed PR runs, and avoid loops by branch prefix guard
    if: |
      github.event.workflow_run.conclusion == 'failure' &&
      github.event.workflow_run.event == 'pull_request' &&
      !startsWith(github.event.workflow_run.head_branch, 'claude-auto-fix-ci-')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR head
        uses: actions/checkout@v5
        with:
          # Checkout the exact branch that triggered Basic CI
          repository: ${{ github.repository }}
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup git identity
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name  "github-actions[bot]"

      - name: Create fix branch
        id: branch
        run: |
          BRANCH_NAME="claude-auto-fix-ci-${{ github.event.workflow_run.head_branch }}-${{ github.run_id }}"
          git checkout -b "$BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Collect failure details
        id: details
        uses: actions/github-script@v7
        with:
          script: |
            const run_id = context.payload.workflow_run.id;
            const { data: run } = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id
            });

            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id
            });

            const failed = jobs.jobs.filter(j => j.conclusion === 'failure');
            return {
              runUrl: run.html_url,
              headSha: run.head_sha,
              headBranch: run.head_branch,
              prNum: (run.pull_requests && run.pull_requests[0]) ? run.pull_requests[0].number : null,
              failedJobs: failed.map(j => j.name)
            };

      - name: Use Claude to fix CI
        uses: anthropics/claude-code-action@v1
        with:
          prompt: |
            /fix-ci
            Failed CI Run: ${{ fromJSON(steps.details.outputs.result).runUrl }}
            Failed Jobs: ${{ join(fromJSON(steps.details.outputs.result).failedJobs, ', ') }}
            PR Number: ${{ fromJSON(steps.details.outputs.result).prNum }}
            Branch Name: ${{ steps.branch.outputs.branch_name }}
            Base Branch: ${{ github.event.workflow_run.head_branch }}
            Repository: ${{ github.repository }}
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          # Keep tool access tight; expand if needed
          claude_args: "--allowedTools 'Edit,Read,Write,Grep,LS'"

      - name: Push fix branch
        run: |
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "chore(ci): auto-fix CI failures"
          git push -u origin "${{ steps.branch.outputs.branch_name }}"

      - name: Create or comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNum = ${{ fromJSON(steps.details.outputs.result).prNum || 'null' }};
            const head = "${{ steps.branch.outputs.branch_name }}";
            const base = "${{ github.event.workflow_run.head_branch }}";

            if (prNum && prNum !== 'null') {
              // Comment on the original PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNum,
                body: `ðŸ¤– Pushed auto-fix branch \`${head}\`. Please review.`
              });
            } else {
              // Open a new PR if we can't find the original
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: "chore(ci): auto-fix CI failures",
                head,
                base,
                body: "Automated fixes for failing CI."
              });
            }