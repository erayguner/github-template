name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  id-token: write
  attestations: write
  packages: write
  actions: read

jobs:
  # Automated release creation with industry standards
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.release.outputs.id }}
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --oneline --since="$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo '1970-01-01')" --until="HEAD" --pretty=format:"- %s (%h)" >> CHANGELOG.md
          
          # Set changelog as output
          CHANGELOG=$(cat CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}

  # Build and attest release artifacts
  build-release-artifacts:
    name: Build Release Artifacts
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - artifact_type: terraform
            path: terraform/
            name: terraform-release
          - artifact_type: python
            path: python/
            name: python-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup environment for ${{ matrix.artifact_type }}
        run: |
          if [ "${{ matrix.artifact_type }}" = "terraform" ]; then
            wget -O terraform.zip https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
            unzip terraform.zip
            sudo mv terraform /usr/local/bin/
          elif [ "${{ matrix.artifact_type }}" = "python" ]; then
            curl -LsSf https://astral.sh/uv/install.sh | sh
            source $HOME/.cargo/env
            uv python install 3.11
          fi

      - name: Build ${{ matrix.artifact_type }} artifact
        run: |
          if [ "${{ matrix.artifact_type }}" = "terraform" ]; then
            cd terraform/
            terraform init -backend=false
            terraform validate
            tar -czf ../terraform-${{ github.ref_name }}.tar.gz --exclude='.terraform' --exclude='*.tfstate*' .
          elif [ "${{ matrix.artifact_type }}" = "python" ]; then
            cd python/
            uv sync
            uv build
            cp dist/* ../
          fi

      - name: Generate SLSA provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            ${{ matrix.artifact_type }}-${{ github.ref_name }}.tar.gz
            *.whl
            *.tar.gz

      - name: Generate SBOM attestation
        uses: actions/attest-sbom@v1
        with:
          subject-path: |
            ${{ matrix.artifact_type }}-${{ github.ref_name }}.tar.gz
            *.whl
            *.tar.gz
          sbom-path: sbom-${{ matrix.artifact_type }}.json

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_type }}-${{ github.ref_name }}.tar.gz
          asset_name: ${{ matrix.artifact_type }}-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

  # Security verification for releases
  security-verification:
    name: Security Verification
    needs: [create-release, build-release-artifacts]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Verify signatures
        run: |
          echo "## 🔐 Release Security Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SLSA provenance generated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOM attestations created" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All artifacts signed with GitHub OIDC" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Release follows semantic versioning" >> $GITHUB_STEP_SUMMARY

      - name: Post-release security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'repo'
          format: 'sarif'
          output: 'release-scan.sarif'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'release-scan.sarif'